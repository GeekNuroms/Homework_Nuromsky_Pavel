# Осуществить программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс «Клетка».
# В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов:
# сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__floordiv____truediv__()).
# Эти методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и
# округление до целого числа деления клеток соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки.
# Операцию необходимо выполнять, только если разность количества ячеек двух
# клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создаётся общая клетка из двух.
# Число ячеек общей клетки — произведение количества ячеек этих двух клеток.
# Деление. Создаётся общая клетка из двух.
# Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Этот метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, а количество ячеек в ряду — 5.
# В этом случае метод make_order() вернёт строку: *****\n*****\n**.
# Или количество ячеек клетки — 15, а количество ячеек в ряду равняется 5.
# Тогда метод make_order() вернёт строку: *****\n*****\n*****.
# Подсказка: подробный список операторов для перегрузки доступен по ссылке.


class Cell:
    def __init__(self, value: int):
        self.value = value
        if isinstance(value, int):
            self.value = value
        else:
            raise ValueError

    def __add__(self, other):
        return Cell(self.value + other.value)

    def __sub__(self, other):
        if self.value > other.value:
            return Cell(self.value - other.value)
        else:
            print(f'У меня столько нету')
            return Cell(0)

    def __mul__(self, other):
        return Cell(self.value * other.value)

    def __mul__(self, other):
        return Cell(self.value * other.value)

    def __floordiv__(self, other):
        return Cell(self.value // other.value)

    def make_order(self, number: int):
        reserve = self.value
        if isinstance(number, int) and number > 0:
            while reserve > 0:
                reserve -= number
                print('*'*min(reserve, number))
        else:
            print('Некорректное значение')


cell1 = Cell(100)
cell2 = Cell(200)
cell3 = cell1 + cell2
print(vars(cell3))
cell3 = cell2 - cell1
print(vars(cell3))
cell3 = cell1 - cell2
print(vars(cell3))
cell3 = cell1 * cell2
print(vars(cell3))
cell3 = cell1 // cell2
print(vars(cell3))

cell1 = Cell(29)
cell1.make_order(3)